// 블로그 API 구상 고민

- 사용자 관련 기능

    - 로그인
        - 로그인, 회원가입 버튼
        - 로그인 안되면 "닉네임 또는 패스워드를 확인해주세요"
        - 로그인되면 전체 게시글 목록 조회로
        - Request
            - Method: POST // 로그인을 한다는 것은 입장권을 발급해준다는 개념이 더 크다. 그래서 POST
            - URL: /auth
            - body: { nickname: string, password: string }
        - Response
            - HTTP Status code: 201 // 토큰을 발급해주기 때문에 201
            - Payload: { token: string } // 로그인이 성공했을 때 토큰을 부여, 그때 그때 만드는 것이 좋음

    - 회원 가입
        - 회원가입, 로그인 화면으로 돌아가기 버튼
        - Request
            - Method: POST
            - URL: /users
        - body: { nickname: string, e-mail: string, password: string, passwordConfirm: string }
        - 닉네임 최소 3자, 알파벳 대소문자, 숫자 구성
        - 비밀번호 최소 4자, 닉네임과 같은 값이 포함된 경우 회원가입 실패
        - 비밀번호 일치 확인
        - 중복된 닉네임으로 회원가입할 시, 중복된 닉네임입니다 라는 에러메시지 보여주기
        - 가입 완료되면 로그인 페이지로 이동
        - Response
            - HTTP Status code: 201 // created 일반적으로 POST와 PUT 요청 뒤에 온다
            - Payload: { token: string } // 회원가입하면 로그인 상태를 유지하기위해 토큰 부여

    - 로그인 검사
        - 아래 페이지를 제외한 모든 페이지는 로그인 한 경우만 볼 수 있도록
            - 회원가입 페이지, 로그인 페이지, 게시글 목록 조회 페이지, 게시글 조회 페이지
        - 로그인 안하고 로그인이 필요한 경로로 접속한 경우, 로그인이 필요합니다 라는 메세지와 함께 로그인 페이지로 이동
        - 로그인한 이용자가 로그인 페이지 또는 회원가입 페이지에 접속한 경우, 이미 로그인이 되어있습니다 라는 메시지 띄우고, 전체 게시글 목록 조회 페이지로 이동
        
    - 로그아웃 게시글 검색 페이지에서

- 게시글 관련 기능

    - 게시글 전체 목록 조회
        - 로그인 하지 않아도 조회 가능

        - 제목, 작성자명, 작성 날짜 조회
        - 번호 기준으로 내림차순 정리하기 (max로)
        - Request
            - Method: GET
            - URL: /  (index로)
        - Response
            - HTTP Status code: 200
            - Payload: { articleId: number, nickname: string, title: string } // 게시글 페이지에 게재될 객체를 배열로 받음

    - 게시글 등록 (전체 페이지에 두기)
        - 제목, 작성자명, 비밀번호, 작성 내용
        - Request
            - Method: POST
            - URL: /post
            - body: { title: string, content: string }
        - Response
            - HTTP Status code: 201
            - Payload: { message: string}
            - replace: "/"

    - 게시글 상세 조회
        - 특정 게시물 클릭할 시, 상세 페이지
        - 이름, 제목, 내용, 댓글 내용, 댓글 작성란
        - Request
            - Method: GET
            - URL: /articles/:articleId
        - Response
            - HTTP Status code: 200
            - Payload: { articleId: number, nickname: number, title: string, content: string }

    - 삭제
        - Request
            - Method: DELETE
            - URL: /article/:articleId
        - Response
            - HTTP Status code: 200
            - Payload: { message: string }

- 댓글 관련 기능

    - 특정 게시글에 달린 댓글 목록 조회
        - Request
            - Method: GET
            - URL: /articles/:articleId/comments
        - Response
            - HTTP Status code: 200
            - Payload: { articleId: number, commentId: number, nickname: string, comment: string }

    - 특정 게시글 댓글 작성
        - 목록 조회할 때 댓글 쓰는 란 넣기
        - 로그인하지 않은 사람이 작성을 누르면 로그인이 필요할 기능 알람, 이동
        - 댓글 내용 비워두면 댓글 내용 입력해주세요 알람
        - Request
            - Method: POST
            - URL: /articles/:articleId/comments
            - body: { articleId: number, commentId: number, nickname: string, comment: string }
        - Response
            - HTTP Status code: 201
            - Payload: { 상세 게시글 조회로 } // 댓글 등록하자마자 바로 불러올 수 있도록

    - 특정 게시글에 달린 댓글 수정
        -내가 작성한 댓글만 수정 가능
        - 댓글 본문이 사라지고, 댓글 내용, 저장 버튼 생성
        - 댓글 내용 기본값
        - 수정할 댓글 내용 없지 않도록
        - 저장 누르면 덮어쓰기
        - Request
            - Method: PUT
            - URL: /article/:articleId/comments/:commentId
            - body: { commentId: number, nickname: string, conment: string }
        - Response
            - HTTP Status code:
            - Payload: { 상세 게시글 조회로 } // 댓글 수정 하자마자 바로 불러올 수 있도록

    - 특정 게시글에 달린 댓글 삭제
        - 내가 작성한 댓글만 삭제 가능
        - 정말로 삭제하시겠습니까? 메시지 띄우고, 확인, 취소 버튼
        - Request
            - Method: DELETE
            - URL: /article/:articleId/comments/:commentId
        - Response
            - HTTP Status code: 200
            - Payload: { message string}